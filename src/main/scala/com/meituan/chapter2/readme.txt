对 Actor 的剖析、Actor 的创建以及与 Actor 的通信
使用 Akka API 处理异步响应所需的工具和知识
Future(用于存放将来可能成功或失败的结果)的使用
2.1 响应式系统设计
2.2 响应式四准则包含了 4 个准则，或者说是设计目标:灵敏性、伸缩性、容错性以及事件驱动设计
2.3 先通过ScalaPongActor 介绍 Actor 最基 本的特性，理解 Actor 的基本结构和方法。
2.4 在通过ActorCtreate代码列举几种Actor的创建方式。
2.5 Promise、Future 和事件驱动的编程模型 详细内容参考测试用例：FutureExample

2.5.10
构建分布式系统——AkkademyDb 和客户端
我们要把本章中介绍过的所有知 识点结合起来，编写一个小型分布式应用程序。
尽管代码相当简单，但是这个例子直接 展示了两个远程系统如何通过 Akka 相互通信，
虽然从结构上来看还是比较先进的，不过我认为还是要马上展示一下 Akka 的强大之处，让读者保持对本书的兴趣。
如果对 Akka 能提供的强大功能有些许了解，就会很有兴趣继续阅读余下的章节了。


我们将构建一个服务和一个客户端。也就是数据库和与之通信的数据库客户端。
要通过网络在客户端和服务之间发送消息，我们的两个项目需要共享相同的消息。
我们也可以在两个项目中都包含消息，不过为了让例子更简短一些，我们把消息放在服务器项目中，然后在客户端项目中导入服务器项目(也就包含了消息)。
首先，我们将扩展第一章中的服务器项目，定义希望数据库接受的所有消息。
接着，我们将针对这些消息分别实现数据库中的相关功能。
在构建了这些基本操作之后，我们将编写一个 main()方法来运行数据库。
启动应用程序后，我们将构建一个 ActorSystem 以及一个在该 ActorSystem 中的 Actor，这就构成 了我们的第一个 Akka 微服务。


我们还将创建一个数据库客户端，用于展示如何请求服务器，以及如何从远程 Actor 中获取 Future。
服务器端的服务接收到客户端的请求后将返回 Future。
这样我们就已经 编写了一个可以使用的键值存储数据库(和 redis 很类似)以及一个可以使用该数据库的 远程客户端，如图 2-4 所示。